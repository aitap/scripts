#!/bin/bash
# vi:ts=4
set -ue # die on undefined variables and non-zero exit code

usage() {
	cat <<USAGE
Usage: $0 [-options] -o <target.djvu> <image files> [-more options <more image files>]
Available options (in the order of application) are:
	-o <file>
		Set output file [REQUIRED]
	-r <degrees>
		rotate images by 90, 180 or 270 degrees
	-s @<hpages>x<vpages>+<hpixels>+<vpixels>
		split each image into <hpages>x<vpages> pages, leaving
		overlapping part sized <hpixels>x<vpixels>
		btw, this option is actually just imagemagick's -crop
	-u <radius>x<sigma>[+<gain>+<threshold>]
		apply unsharp mask filter
	-g
		make images grey-scale
	-c <black>x<white>[%]
		stretch contrast of the pages, blacking out at most <black>
		pixels, whiting out at most <white> pixels; treat numbers as
		percentiles if there is '%' sign at the end
	-a <other options>
		applies the specified IM options to the image
	-q <colors>
		quantize image, leaving only <colors> colors
		this option implies cpaldjvu compression
	-m <threshold>
		make pages monochrome
		this option implies cjb2 compression
	-p
		switch to DjVuPhoto encoding (not cjb2 or cpaldjvu)
	-d <dpi>
		set dpi for encoders, default 600
	-e
		skip non-existent files
	-h
		this help message
USAGE
	exit $1
}

# encoding parameters and output file - from command line
declare rotate= split= unsharp= greyscale= cstretch= other= quantize= threshold= manual= encoder= target= dpi=600 skip=

# encoding mode and encoder command - from encoding parameters
declare -a encoder
declare format
# imagemagick processing parameters - from encoding parameters
declare -a process
# files to build target.djvu from
declare -a compressed=()

while [ $# -gt 0 ]; do
	if getopts ":d:o:r:s:u:gc:q:m:ha:ep" OPT; then
		case "$OPT" in
			r)
				rotate="$OPTARG"
				[ $rotate ] && echo "Will rotate by $rotate degrees clockwise"
				;;
			s)
				split="$OPTARG"
				[ $split ] && echo "Will split by $split pieces"
				;;
			u)
				unsharp="$OPTARG"
				[ $unsharp ] && echo "Will apply unsharp mask ($unsharp)"
				;;
			g)
				if [ $greyscale ]; then
					greyscale=
				else
					greyscale=1
					echo "Will convert to greyscale"
				fi
				;;
			c)
				cstretch="$OPTARG"
				threshold=""
				[ $cstretch ] && echo "Will stretch contrast ($cstretch)"
				;;
			a)
				other="$OPTARG"
				[ "$other" ] && echo "Will set additional options ($other)"
				;;
			q)
				quantize="$OPTARG"
				threshold=""
				[ "$quantize" ] && echo "Will quantize to $quantize colors"
				;;
			m)
				threshold="$OPTARG"
				quantize=""
				[ "$threshold" ] && echo "Will convert to monochrome with threshold $threshold"
				;;
			p)
				threshold=""
				quantize=""
				echo "Will encode as DjVuPhoto"
				;;
			h)
				usage 0
				;;
			o)
				if [ "$target" ]; then
					echo "Target already set to $target! What did you mean? Aborting"
					exit 1
				fi
				target="$OPTARG"
				echo "Will save to $target"
				;;
			d)
				dpi="$OPTARG"
				echo "Will set dpi to $dpi"
				;;
			e)
				skip=1
				echo "Will skip non-existent files"
				;;
			*)
				echo "Invalid option: $OPT $OPTARG"
				usage 1
				;;
		esac
		shift $(($OPTIND-1)) # get $@ ready for next iteration
		OPTIND=1 # get getopts ready, too

		# now we need to update the encoding mode
		if [ "$threshold" ]; then
			encoder=("cjb2" "-verbose" "-dpi" "$dpi")
			# cjb2 works with monochrome images
			format=pbm
		elif [ "$quantize" ]; then
			encoder=("cpaldjvu" "-verbose" "-colors" "$quantize" "-dpi" "$dpi")
			format=ppm
		else
			encoder=("c44" "-dpi" "$dpi")
			format=ppm
		fi
		# and update the processing parameters
		process=("-verbose")
		[ "$rotate" ] && process+=("-rotate" "$rotate")
		[ "$split" ] && process+=("-crop" "$split")
		[ "$unsharp" ] && process+=("-unsharp" "$unsharp")
		[ $greyscale ] && process+=("-colorspace" "Gray")
		[ "$cstretch" ] && process+=("-contrast-stretch" "$cstretch")
		[ "$other" ] && process+=($other) # yes, without quotes
		[ "$quantize" ] && process+=("+dither" "-colors" "$quantize") # disable dithering to help cpaldjvu
		[ "$threshold" ] && process+=("-threshold" "$threshold")
		continue
	fi

	if ! [ "$target" ]; then
		echo "About to start processing files, but no target given (yet?)!"
		echo "Please set the target before the files to process (-o option)."
		echo "Aborting."
		exit 1
	fi

	if [ -e "$target" ]; then
		echo "'$target' already exists! Will not overwrite it, aborting."
		exit 1
	fi

	if [ ! -e "$1" -a -n "$skip" ]; then
		echo "Skipping non-existent $1"
		shift 1
		continue
	fi

	convert "$1" "${process[@]}" "$1.%d.$format"
	for part in "$1".*.$format; do
		# $encoder = ${encoder[0]} = program name
		"${encoder[@]}" "$part" "$part".$encoder
		rm -v "$part"
		compressed+=("$part".$encoder)
	done

	shift 1 # we processed the file, update $@ accordingly
done

if [ "${#compressed[@]}" -eq 0 ]; then
	echo "Files to process are not specified! Nothing to do, aborting"
	usage 1
fi

echo "Combining temp files into target $target"
djvm -c "$target" "${compressed[@]}"

echo "Removing temp files"
rm -v "${compressed[@]}"
