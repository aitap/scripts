#!/usr/bin/perl
use warnings;
use strict;
use 5.010;
use Net::IMAP::Simple;
use Getopt::Long qw(:config no_ignore_case);

my ($delta, $port, $dir, $prefix, $timeout) = (200_000, 993, "INBOX", "mail-", 30);
GetOptions(
	"delta=s" => \$delta,
	"Port=i" => \$port,
	"folder=s" => \$dir,
	"output=s" => \$prefix,
	"timeout=i" => \$timeout,
	"login=s" => \my $login,
	"password=s" => \my $password,
	"server=s" => \my $server,
	"Search=s" => \my $search,
	"id=i" => \my @ids,
) or die "Usage: $0 [-d delta] [-p Port] -l login -p password -s server [ -S search | -i id [-i id ...]] -o output_prefix [-f folder] [-t timeout]\n";
die "-s <server> -l <login> -p <password> is required\n" unless $server && $login && $password;
die "Nether -i <id> nor -S <search> specified, aborting\n" unless $search || @ids;

my $connect_was_success = 0;
CONNECT: {
	eval {
		local $SIG{ALRM} = sub { die "timeout"; };
		alarm $timeout;
		my $imap = Net::IMAP::Simple::->new("$server:$port", use_ssl => 1, find_ssl_defaults => [])
			and do { $connect_was_success = 1 }
			or do {
				warn "WARNING: $Net::IMAP::Simple::errstr while connecting to $server:$port and no success so far!\n".
				     "Check your address!\n"
					if $connect_was_success<1;
				die "retry";
			};
		say "Connected to $server:$port";
		$imap->login($login, $password)
			and do { $connect_was_success = 2 }
			or do {
				warn "WARNING: ".$imap->errstr." while logging in with $login and no success so far!\n".
				     "Check your credentials!\n"
					if $connect_was_success<2;
				die "retry";
			};
		say "Logged in as $login";
		$imap->select($dir) and do { $connect_was_success = 3 }
			or do {
				warn "WARNING: ".$imap->errstr." while trying to select folder $dir and no success so far!\n".
				     "Check your folder name!\n"
					if $connect_was_success<3;
				die "retry";
			};
		say "Selected folder $dir";
		if (!@ids and $connect_was_success<4) { # need to search for them
			@ids = defined $id ? ($id) : $imap->search($search);
			die "Search $search returned empty list, nothing to do\n"
				if !@ids;
			say "Will download message[s]: @ids";
			@ids = map { { id => $_ } } @ids;
			$connect_was_success = 4;
		}
		MESSAGE: while (defined(my $msg = $ids[0])) {
			my $id = $msg->{id};
			alarm $timeout;
			$msg->{size} ||= $imap->list($id);
			alarm 0;
			my $file = "$prefix$id.msg";
			open my $fh, (-f $file ? "+<" : ">"), $file or die "$file: $!\n";
			my $offset = -s $file;
			say "Saving message $id to $file, size $msg->{size}, starting at $offset";
			FETCH: {
				$|=1;
				seek $fh, $offset, 0;
				alarm $timeout;
				my $part = scalar $imap->get( $id, "BODY[]<$offset.$delta>" );
				alarm 0;
				print ".";
				print $fh $part;
				$offset += $delta;
				if ($offset >= $msg->{size}) {
					shift @ids;
					say "";
					next MESSAGE;
				}
				redo FETCH;
			}
		}
		alarm 0;
		1;
	} or do {
		if ($@ =~ /timeout|retry/) {
			say "Will try again"
			redo CONNECT;
		} else { die $@ }
	};
	say "All done.";
}

__END__
      The defined search keys are as follows.  Refer to the Formal
      Syntax section for the precise syntactic definitions of the
      arguments.

      <sequence set>
         Messages with message sequence numbers corresponding to the
         specified message sequence number set.

      ALL
         All messages in the mailbox; the default initial key for
         ANDing.

      ANSWERED
         Messages with the \Answered flag set.

      BCC <string>
         Messages that contain the specified string in the envelope
         structure's BCC field.

      BEFORE <date>
         Messages whose internal date (disregarding time and timezone)
         is earlier than the specified date.

      BODY <string>
         Messages that contain the specified string in the body of the
         message.

      CC <string>
         Messages that contain the specified string in the envelope
         structure's CC field.

      DELETED
         Messages with the \Deleted flag set.

      DRAFT
         Messages with the \Draft flag set.

      FLAGGED
         Messages with the \Flagged flag set.

      FROM <string>
         Messages that contain the specified string in the envelope
         structure's FROM field.

      HEADER <field-name> <string>
         Messages that have a header with the specified field-name (as
         defined in [RFC-2822]) and that contains the specified string
         in the text of the header (what comes after the colon).  If the
         string to search is zero-length, this matches all messages that
         have a header line with the specified field-name regardless of
         the contents.

      KEYWORD <flag>
         Messages with the specified keyword flag set.

      LARGER <n>
         Messages with an [RFC-2822] size larger than the specified
         number of octets.

      NEW
         Messages that have the \Recent flag set but not the \Seen flag.
         This is functionally equivalent to "(RECENT UNSEEN)".

      NOT <search-key>
         Messages that do not match the specified search key.

      OLD
         Messages that do not have the \Recent flag set.  This is
         functionally equivalent to "NOT RECENT" (as opposed to "NOT
         NEW").

      ON <date>
         Messages whose internal date (disregarding time and timezone)
         is within the specified date.

      OR <search-key1> <search-key2>
         Messages that match either search key.

      RECENT
         Messages that have the \Recent flag set.

      SEEN
         Messages that have the \Seen flag set.

      SENTBEFORE <date>
         Messages whose [RFC-2822] Date: header (disregarding time and
         timezone) is earlier than the specified date.

      SENTON <date>
         Messages whose [RFC-2822] Date: header (disregarding time and
         timezone) is within the specified date.

      SENTSINCE <date>
         Messages whose [RFC-2822] Date: header (disregarding time and
         timezone) is within or later than the specified date.

      SINCE <date>
         Messages whose internal date (disregarding time and timezone)
         is within or later than the specified date.

      SMALLER <n>
         Messages with an [RFC-2822] size smaller than the specified
         number of octets.

      SUBJECT <string>
         Messages that contain the specified string in the envelope
         structure's SUBJECT field.

      TEXT <string>
         Messages that contain the specified string in the header or
         body of the message.

      TO <string>
         Messages that contain the specified string in the envelope
         structure's TO field.

      UID <sequence set>
         Messages with unique identifiers corresponding to the specified
         unique identifier set.  Sequence set ranges are permitted.

      UNANSWERED
         Messages that do not have the \Answered flag set.

      UNDELETED
         Messages that do not have the \Deleted flag set.

      UNDRAFT
         Messages that do not have the \Draft flag set.

      UNFLAGGED
         Messages that do not have the \Flagged flag set.

      UNKEYWORD <flag>
         Messages that do not have the specified keyword flag set.

      UNSEEN
         Messages that do not have the \Seen flag set.

   Example:    C: A282 SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM "Smith"
               S: * SEARCH 2 84 882
               S: A282 OK SEARCH completed
               C: A283 SEARCH TEXT "string not in mailbox"
               S: * SEARCH
               S: A283 OK SEARCH completed
               C: A284 SEARCH CHARSET UTF-8 TEXT {6}
               C: XXXXXX
               S: * SEARCH 43
               S: A284 OK SEARCH completed

        Note: Since this document is restricted to 7-bit ASCII
        text, it is not possible to show actual UTF-8 data.  The
        "XXXXXX" is a placeholder for what would be 6 octets of
        8-bit data in an actual transaction.
